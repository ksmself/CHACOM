{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers/index';\nimport rootSaga from '../sagas/index'; // action이 dispatch되는 것을 loggingg하는 미들웨어\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      // action 실행 전에 콘솔 한 번 찍어주는 미들웨어\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware]; // redux의 기능이 확장된 것이 enhancer\n\n  var enhancer = false ? // 배포용\n  // middlewares는 배열이니까 spread해서 넣는다\n  compose(applyMiddleware.apply(void 0, middlewares)) : // 개발용일 때는 devtools 연결\n  composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  // 개발모드라면 디버그를 더 자세하게 해줌\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","createSagaMiddleware","composeWithDevTools","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAEA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACzE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAJoD;AAAA,GAA5B;AAAA,CAAzB;;AAMA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,MAAMa,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB,CAF2B,CAI3B;;AACA,MAAMU,QAAQ,GACZ,QACI;AACA;AACAhB,EAAAA,OAAO,CAACD,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAHX,GAII;AACAZ,EAAAA,mBAAmB,CAACJ,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CANzB;AAQA,MAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AAEA,SAAOY,KAAP;AACD,CAjBD;;AAmBA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5C;AACAQ,EAAAA,KAAK;AAFuC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers/index';\r\nimport rootSaga from '../sagas/index';\r\n\r\n// action이 dispatch되는 것을 loggingg하는 미들웨어\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n  // action 실행 전에 콘솔 한 번 찍어주는 미들웨어\r\n  console.log(action);\r\n  return next(action);\r\n};\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n\r\n  // redux의 기능이 확장된 것이 enhancer\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? // 배포용\r\n        // middlewares는 배열이니까 spread해서 넣는다\r\n        compose(applyMiddleware(...middlewares))\r\n      : // 개발용일 때는 devtools 연결\r\n        composeWithDevTools(applyMiddleware(...middlewares));\r\n\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  // 개발모드라면 디버그를 더 자세하게 해줌\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}