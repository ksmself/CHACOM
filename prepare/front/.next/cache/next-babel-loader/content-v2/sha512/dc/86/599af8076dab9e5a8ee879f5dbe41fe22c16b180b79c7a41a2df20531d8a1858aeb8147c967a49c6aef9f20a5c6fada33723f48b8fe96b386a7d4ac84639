{"ast":null,"code":"import { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uC2B9\\uBBF8\\\\Desktop\\\\for-portfolio\\\\2021-April\\\\prepare\\\\front\\\\components\\\\ExpressionBox.js\";\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport ExpressionInput from './ExpressionInput';\nconst expressionBox = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\nconst plusBtn = css`\n  svg {\n    font-size: 50px;\n    color: #3a18ff;\n  }\n`;\n\nconst ExpressionBox = () => {\n  const [form] = Form.useForm();\n  const {\n    0: expressions,\n    1: setExpressions\n  } = useState([{\n    expressionNumber: 1,\n    pinyin: '',\n    meaning: ''\n  }]);\n  const addExpression = useCallback(() => {\n    const data = {\n      expressionNumber: expressions.length + 1,\n      pinyin: '',\n      meaning: ''\n    };\n    setExpressions([...expressions, data]);\n  }, [expressions]);\n  return _jsxDEV(_Fragment, {\n    children: _jsxDEV(\"div\", {\n      css: expressionBox,\n      id: \"expression-box\",\n      children: expressions.map(v => {\n        return _jsxDEV(ExpressionInput, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default ExpressionBox;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/components/ExpressionBox.js"],"names":["css","useCallback","useEffect","useState","Form","Input","Button","PlusCircleFilled","ExpressionInput","expressionBox","plusBtn","ExpressionBox","form","useForm","expressions","setExpressions","expressionNumber","pinyin","meaning","addExpression","data","length","map","v"],"mappings":";;;;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,aAAa,GAAGT,GAAI;AAC1B;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMU,OAAO,GAAGV,GAAI;AACpB;AACA;AACA;AACA;AACA,CALA;;AAOA,MAAMW,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,IAAD,IAASR,IAAI,CAACS,OAAL,EAAf;AAEA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,CAC7C;AAAEa,IAAAA,gBAAgB,EAAE,CAApB;AAAuBC,IAAAA,MAAM,EAAE,EAA/B;AAAmCC,IAAAA,OAAO,EAAE;AAA5C,GAD6C,CAAD,CAA9C;AAIA,QAAMC,aAAa,GAAGlB,WAAW,CAAC,MAAM;AACtC,UAAMmB,IAAI,GAAG;AACXJ,MAAAA,gBAAgB,EAAEF,WAAW,CAACO,MAAZ,GAAqB,CAD5B;AAEXJ,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKAH,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBM,IAAjB,CAAD,CAAd;AACD,GAPgC,EAO9B,CAACN,WAAD,CAP8B,CAAjC;AASA,SACE;AAAA,cACE;AAAK,MAAA,GAAG,EAAEL,aAAV;AAAyB,MAAA,EAAE,EAAC,gBAA5B;AAAA,gBACGK,WAAW,CAACQ,GAAZ,CAAiBC,CAAD,IAAO;AACtB,eAAO,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA2BD,CA3CD;;AA6CA,eAAeZ,aAAf","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { PlusCircleFilled } from '@ant-design/icons';\r\nimport ExpressionInput from './ExpressionInput';\r\n\r\nconst expressionBox = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst plusBtn = css`\r\n  svg {\r\n    font-size: 50px;\r\n    color: #3a18ff;\r\n  }\r\n`;\r\n\r\nconst ExpressionBox = () => {\r\n  const [form] = Form.useForm();\r\n\r\n  const [expressions, setExpressions] = useState([\r\n    { expressionNumber: 1, pinyin: '', meaning: '' },\r\n  ]);\r\n\r\n  const addExpression = useCallback(() => {\r\n    const data = {\r\n      expressionNumber: expressions.length + 1,\r\n      pinyin: '',\r\n      meaning: '',\r\n    };\r\n    setExpressions([...expressions, data]);\r\n  }, [expressions]);\r\n\r\n  return (\r\n    <>\r\n      <div css={expressionBox} id=\"expression-box\">\r\n        {expressions.map((v) => {\r\n          return <ExpressionInput />;\r\n        })}\r\n        {/* <Form form={form}>\r\n          <Form.Item\r\n            name=\"pinyin\"\r\n            label=\"한어병음\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '한어병음을 입력해주세요!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <PlusCircleFilled css={plusBtn} onClick={addExpression} />\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\">완료</Button>\r\n          </Form.Item>\r\n        </Form> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpressionBox;\r\n"]},"metadata":{},"sourceType":"module"}