{"ast":null,"code":"import { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport _toConsumableArray from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uC2B9\\uBBF8\\\\Desktop\\\\for-portfolio\\\\2021-April\\\\prepare\\\\front\\\\components\\\\ExpressionBox.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  svg {\\n    font-size: 50px;\\n    color: #3a18ff;\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  height: 52px;\\n  margin-bottom: 5px;\\n\\n  button {\\n    position: absolute;\\n    bottom: 0;\\n    right: 0;\\n    font-size: 13px;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  width: 100%;\\n  padding: 15px 10px;\\n  margin-bottom: 20px;\\n  border: 3px solid #18ddff;\\n  border-radius: 4px;\\n\\n  input {\\n    width: 100%;\\n    font-size: 16px;\\n    border: none;\\n    border-bottom: 1px solid #48494b;\\n  }\\n\\n  svg {\\n    position: absolute;\\n    top: 3px;\\n    left: 3px;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { PlusCircleFilled, CloseOutlined } from '@ant-design/icons';\nimport ConvertPopUp from './ConvertPopUp';\nvar expressionBox = css(_templateObject());\nvar box = css(_templateObject2());\nvar pinyinBox = css(_templateObject3());\nvar plusBtn = css(_templateObject4());\n\nvar ExpressionBox = function ExpressionBox() {\n  _s();\n\n  var _useState = useState([{\n    expressionNumber: 1,\n    pinyin: '',\n    meaning: ''\n  }]),\n      expressions = _useState[0],\n      setExpressions = _useState[1];\n\n  var addExpression = useCallback(function () {\n    var data = {\n      expressionNumber: expressions.length + 1,\n      pinyin: '',\n      meaning: ''\n    };\n    setExpressions([].concat(_toConsumableArray(expressions), [data]));\n  }, [expressions]);\n  var onChangeText = useCallback(function (expressionNum) {\n    return function (e) {\n      var tempExpressions = expressions.map(function (expression) {\n        if (expressionNum === expression.expressionNumber) {\n          expression[e.target.name] = e.target.value;\n        }\n\n        return expression;\n      });\n      setExpressions(tempExpressions);\n    };\n  }, [expressions]);\n  useEffect(function () {\n    console.log(expressions);\n  }, [expressions]);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"div\", {\n      css: expressionBox,\n      id: \"expression-box\",\n      children: expressions.map(function (v, index) {\n        return _jsxDEV(\"div\", {\n          css: box,\n          children: [_jsxDEV(\"div\", {\n            css: pinyinBox,\n            children: [_jsxDEV(\"input\", {\n              name: \"pinyin\",\n              placeholder: \"\\uD55C\\uC5B4\\uBCD1\\uC74C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n              value: v.pinyin,\n              onChange: onChangeText(index + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, _this), index !== 0 && _jsxDEV(CloseOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, _this), _jsxDEV(ConvertPopUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, _this), _jsxDEV(\"input\", {\n            name: \"meaning\",\n            placeholder: \"\\uB73B\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            value: v.meaning,\n            onChange: onChangeText(index + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, _this)]\n        }, v.expressionNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, _this), _jsxDEV(PlusCircleFilled, {\n      css: plusBtn,\n      onClick: addExpression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(ExpressionBox, \"uDBq2AwYBOlLkByUjiwexn3bc1Y=\");\n\n_c = ExpressionBox;\nexport default ExpressionBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpressionBox\");","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/components/ExpressionBox.js"],"names":["css","useCallback","useEffect","useState","PlusCircleFilled","CloseOutlined","ConvertPopUp","expressionBox","box","pinyinBox","plusBtn","ExpressionBox","expressionNumber","pinyin","meaning","expressions","setExpressions","addExpression","data","length","onChangeText","expressionNum","e","tempExpressions","map","expression","target","name","value","console","log","v","index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,mBAAhD;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,aAAa,GAAGP,GAAH,mBAAnB;AAOA,IAAMQ,GAAG,GAAGR,GAAH,oBAAT;AAsBA,IAAMS,SAAS,GAAGT,GAAH,oBAAf;AAaA,IAAMU,OAAO,GAAGV,GAAH,oBAAb;;AAOA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAA,kBACYR,QAAQ,CAAC,CAC7C;AAAES,IAAAA,gBAAgB,EAAE,CAApB;AAAuBC,IAAAA,MAAM,EAAE,EAA/B;AAAmCC,IAAAA,OAAO,EAAE;AAA5C,GAD6C,CAAD,CADpB;AAAA,MACnBC,WADmB;AAAA,MACNC,cADM;;AAK1B,MAAMC,aAAa,GAAGhB,WAAW,CAAC,YAAM;AACtC,QAAMiB,IAAI,GAAG;AACXN,MAAAA,gBAAgB,EAAEG,WAAW,CAACI,MAAZ,GAAqB,CAD5B;AAEXN,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKAE,IAAAA,cAAc,8BAAKD,WAAL,IAAkBG,IAAlB,GAAd;AACD,GAPgC,EAO9B,CAACH,WAAD,CAP8B,CAAjC;AASA,MAAMK,YAAY,GAAGnB,WAAW,CAC9B,UAACoB,aAAD;AAAA,WAAmB,UAACC,CAAD,EAAO;AACxB,UAAMC,eAAe,GAAGR,WAAW,CAACS,GAAZ,CAAgB,UAACC,UAAD,EAAgB;AACtD,YAAIJ,aAAa,KAAKI,UAAU,CAACb,gBAAjC,EAAmD;AACjDa,UAAAA,UAAU,CAACH,CAAC,CAACI,MAAF,CAASC,IAAV,CAAV,GAA4BL,CAAC,CAACI,MAAF,CAASE,KAArC;AACD;;AACD,eAAOH,UAAP;AACD,OALuB,CAAxB;AAMAT,MAAAA,cAAc,CAACO,eAAD,CAAd;AACD,KARD;AAAA,GAD8B,EAU9B,CAACR,WAAD,CAV8B,CAAhC;AAaAb,EAAAA,SAAS,CAAC,YAAM;AACd2B,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,SACE;AAAA,eACE;AAAK,MAAA,GAAG,EAAER,aAAV;AAAyB,MAAA,EAAE,EAAC,gBAA5B;AAAA,gBACGQ,WAAW,CAACS,GAAZ,CAAgB,UAACO,CAAD,EAAIC,KAAJ,EAAc;AAC7B,eACE;AAAK,UAAA,GAAG,EAAExB,GAAV;AAAA,qBACE;AAAK,YAAA,GAAG,EAAEC,SAAV;AAAA,uBACE;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,WAAW,EAAC,qEAFd;AAGE,cAAA,KAAK,EAAEsB,CAAC,CAAClB,MAHX;AAIE,cAAA,QAAQ,EAAEO,YAAY,CAACY,KAAK,GAAG,CAAT;AAJxB;AAAA;AAAA;AAAA;AAAA,qBADF,EAOGA,KAAK,KAAK,CAAV,IAAe,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,qBAPlB,EAQE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,qBARF;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAWE;AACE,YAAA,IAAI,EAAC,SADP;AAEE,YAAA,WAAW,EAAC,mDAFd;AAGE,YAAA,KAAK,EAAED,CAAC,CAACjB,OAHX;AAIE,YAAA,QAAQ,EAAEM,YAAY,CAACY,KAAK,GAAG,CAAT;AAJxB;AAAA;AAAA;AAAA;AAAA,mBAXF;AAAA,WAAoBD,CAAC,CAACnB,gBAAtB;AAAA;AAAA;AAAA;AAAA,iBADF;AAoBD,OArBA;AADH;AAAA;AAAA;AAAA;AAAA,aADF,EAyBE,QAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEF,OAAvB;AAAgC,MAAA,OAAO,EAAEO;AAAzC;AAAA;AAAA;AAAA;AAAA,aAzBF;AAAA,kBADF;AA6BD,CA5DD;;GAAMN,a;;KAAAA,a;AA8DN,eAAeA,aAAf","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { PlusCircleFilled, CloseOutlined } from '@ant-design/icons';\r\n\r\nimport ConvertPopUp from './ConvertPopUp';\r\n\r\nconst expressionBox = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst box = css`\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 15px 10px;\r\n  margin-bottom: 20px;\r\n  border: 3px solid #18ddff;\r\n  border-radius: 4px;\r\n\r\n  input {\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-bottom: 1px solid #48494b;\r\n  }\r\n\r\n  svg {\r\n    position: absolute;\r\n    top: 3px;\r\n    left: 3px;\r\n  }\r\n`;\r\n\r\nconst pinyinBox = css`\r\n  position: relative;\r\n  height: 52px;\r\n  margin-bottom: 5px;\r\n\r\n  button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst plusBtn = css`\r\n  svg {\r\n    font-size: 50px;\r\n    color: #3a18ff;\r\n  }\r\n`;\r\n\r\nconst ExpressionBox = () => {\r\n  const [expressions, setExpressions] = useState([\r\n    { expressionNumber: 1, pinyin: '', meaning: '' },\r\n  ]);\r\n\r\n  const addExpression = useCallback(() => {\r\n    const data = {\r\n      expressionNumber: expressions.length + 1,\r\n      pinyin: '',\r\n      meaning: '',\r\n    };\r\n    setExpressions([...expressions, data]);\r\n  }, [expressions]);\r\n\r\n  const onChangeText = useCallback(\r\n    (expressionNum) => (e) => {\r\n      const tempExpressions = expressions.map((expression) => {\r\n        if (expressionNum === expression.expressionNumber) {\r\n          expression[e.target.name] = e.target.value;\r\n        }\r\n        return expression;\r\n      });\r\n      setExpressions(tempExpressions);\r\n    },\r\n    [expressions]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(expressions);\r\n  }, [expressions]);\r\n\r\n  return (\r\n    <>\r\n      <div css={expressionBox} id=\"expression-box\">\r\n        {expressions.map((v, index) => {\r\n          return (\r\n            <div css={box} key={v.expressionNumber}>\r\n              <div css={pinyinBox}>\r\n                <input\r\n                  name=\"pinyin\"\r\n                  placeholder=\"한어병음을 입력해주세요\"\r\n                  value={v.pinyin}\r\n                  onChange={onChangeText(index + 1)}\r\n                />\r\n                {index !== 0 && <CloseOutlined />}\r\n                <ConvertPopUp />\r\n              </div>\r\n              <input\r\n                name=\"meaning\"\r\n                placeholder=\"뜻을 입력해주세요\"\r\n                value={v.meaning}\r\n                onChange={onChangeText(index + 1)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <PlusCircleFilled css={plusBtn} onClick={addExpression} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpressionBox;\r\n"]},"metadata":{},"sourceType":"module"}