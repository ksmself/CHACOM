{"ast":null,"code":"import { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uC2B9\\uBBF8\\\\Desktop\\\\for-portfolio\\\\2021-April\\\\prepare\\\\front\\\\pages\\\\write.js\";\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Input, Button, Modal } from 'antd';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ArrowLeftOutlined, PlusCircleFilled, CloseOutlined } from '@ant-design/icons';\nimport { useRouter } from 'next/router';\nimport { createGlobalStyle } from 'styled-components';\nimport useInput from '../hooks/useInput';\nimport { ADD_HASHTAG_REQUEST, REMOVE_HASHTAG_REQUEST, ADD_POST_REQUEST } from '../reducers/post';\nimport ExpressionBox from '../components/ExpressionBox';\nimport { roundBtn } from '../components/styles';\nimport ConvertPopUp from '../components/ConvertPopUp';\nconst {\n  TextArea\n} = Input;\nconst writePage = css`\n  position: relative;\n`;\nconst writeBox = css`\n  display: flex;\n  flex-direction: column;\n  margin: 30px 20px 0;\n`;\nconst titleBox = css`\n  width: 100%;\n  padding: 4px 0;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-weight: 700;\n  border: none;\n\n  &:focus {\n    border: none;\n    box-shadow: none;\n  }\n`;\nconst tagBox = css`\n  margin-bottom: 10px;\n`;\nconst tags = css`\n  align-items: center;\n  flex-wrap: nowrap;\n\n  button {\n    margin-right: 5px;\n    margin-bottom: 5px;\n    font-size: 14px;\n    border: 1px solid #d3adf7;\n    border-radius: 2px;\n    color: #531dab;\n    background-color: #f9f0ff;\n\n    &:hover {\n      cursor: pointer;\n    }\n  }\n\n  input {\n    font-size: 14px;\n    border: none;\n  }\n`;\nconst tagInfoBox = css`\n  display: none;\n  width: 220px;\n  padding: 5px;\n  font-size: 13px;\n  color: #fff;\n  background-color: #3a18ff;\n`;\nconst line = css`\n  width: 40px;\n  height: 10px;\n  margin-bottom: 25px;\n  background-color: #48494b;\n`;\nconst expressionBox = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst box = css`\n  position: relative;\n  width: 100%;\n  padding: 30px 15px;\n  margin-bottom: 20px;\n  border: 3px solid #18ddff;\n  border-radius: 4px;\n\n  input {\n    width: 100%;\n    font-size: 16px;\n    border: none;\n    border-bottom: 1px solid #48494b;\n  }\n\n  span {\n    position: absolute;\n    top: -12px;\n    right: -2px;\n    cursor: pointer;\n  }\n`;\nconst pinyinBox = css`\n  position: relative;\n  height: 52px;\n  margin-bottom: 15px;\n\n  button {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    font-size: 13px;\n  }\n`;\nconst plusBtn = css`\n  margin-bottom: 80px;\n\n  svg {\n    font-size: 50px;\n    color: #3a18ff;\n  }\n`;\nconst footerBox = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 60px;\n  padding: 15px;\n  box-shadow: 0px 0px 8px rgba(58, 24, 255, 20%);\n  background-color: #fff;\n\n  span {\n    cursor: pointer;\n  }\n\n  svg {\n    font-size: 20px;\n  }\n`;\nconst Global = createGlobalStyle`\n  .ant-modal-confirm-body-wrapper\n    > .ant-modal-confirm-body\n    > .ant-modal-confirm-title {\n    font-weight: 700;\n  }\n`;\n\nconst Write = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    currentHashtags\n  } = useSelector(state => state.post);\n  const [title, onChangeTitle] = useInput('');\n  const [tag, onChangeTag, setTag] = useInput('');\n  const onFocusInput = useCallback(() => {\n    document.getElementById('tag-info').style.display = 'block';\n  }, []);\n  const onBlurInput = useCallback(() => {\n    document.getElementById('tag-info').style.display = 'none';\n  }, []);\n  const onKeyPressTag = useCallback(e => {\n    if (e.key === 'Enter' || e.key === ',') {\n      e.preventDefault(); // 빈칸으로 입력하지 않았을때만 리스트에 추가\n\n      if (tag.trim() !== '') {\n        // 이미 있는 해시태그가 아닐때만 리스트에 추가\n        if (!currentHashtags.includes(tag)) {\n          // #을 붙여서 해시태그를 입력했을 때는 #을 떼고\n          if (tag[0] === '#') {\n            dispatch({\n              type: ADD_HASHTAG_REQUEST,\n              data: tag.slice(1)\n            });\n          } else {\n            dispatch({\n              type: ADD_HASHTAG_REQUEST,\n              data: tag\n            });\n          }\n        }\n      }\n\n      setTag('');\n    }\n  }, [tag]);\n  const onClickTag = useCallback(v => {\n    dispatch({\n      type: REMOVE_HASHTAG_REQUEST,\n      data: v\n    });\n  }, []);\n  const {\n    0: expressions,\n    1: setExpressions\n  } = useState([{\n    expressionNumber: 1,\n    pinyin: '',\n    meaning: ''\n  }]);\n  const onChangeText = useCallback(expressionNum => e => {\n    const tempExpressions = expressions.map(expression => {\n      if (expressionNum === expression.expressionNumber) {\n        expression[e.target.name] = e.target.value;\n      }\n\n      return expression;\n    });\n    setExpressions(tempExpressions);\n  }, [expressions]);\n  const addExpression = useCallback(() => {\n    const data = {\n      expressionNumber: expressions.length + 1,\n      pinyin: '',\n      meaning: ''\n    };\n    setExpressions([...expressions, data]);\n  }, [expressions]);\n  const deleteExpression = useCallback(expressionNum => () => {\n    const tempExpressions = expressions.filter(v => v.expressionNumber !== expressionNum);\n    let order = 1;\n    const arrangedExpressions = tempExpressions.map(v => {\n      v.expressionNumber = order;\n      order++;\n      return v;\n    });\n    setExpressions([...arrangedExpressions]);\n  }, [expressions]);\n  const addPost = useCallback(() => {\n    let isExpressionNull = false;\n    expressions.map(v => {\n      if (!v.pinyin || !v.meaning) {\n        isExpressionNull = true;\n      }\n    });\n\n    if (!title && !isExpressionNull) {\n      Modal.warning({\n        title: '제목을 입력해주세요!'\n      });\n    }\n\n    if (isExpressionNull && title) {\n      Modal.warning({\n        title: '비어있는 표현을 모두 채워주세요!'\n      });\n    }\n\n    if (!title && isExpressionNull) {\n      Modal.warning({\n        title: '비어있는 제목과 표현을 모두 채워주세요!'\n      });\n    } // 빈칸 없이 모두 입력되었을 때 표현 업로드하기\n\n\n    if (title && !isExpressionNull) {\n      dispatch({\n        type: ADD_POST_REQUEST,\n        data: {\n          title: title,\n          tag: currentHashtags,\n          expression: expressions\n        }\n      });\n    }\n  }, [title, currentHashtags, expressions]);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Global, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), _jsxDEV(\"div\", {\n      css: writePage,\n      children: [_jsxDEV(\"div\", {\n        css: writeBox,\n        children: [_jsxDEV(TextArea, {\n          css: titleBox,\n          placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n          value: title,\n          onChange: onChangeTitle,\n          autoSize: {\n            minRows: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), _jsxDEV(\"div\", {\n          css: tagBox,\n          children: [_jsxDEV(\"div\", {\n            css: tags,\n            children: [currentHashtags.map((v, index) => {\n              return _jsxDEV(\"button\", {\n                onClick: () => onClickTag(v),\n                children: v\n              }, v, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this);\n            }), _jsxDEV(\"input\", {\n              placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n              value: tag,\n              onChange: onChangeTag,\n              onKeyPress: onKeyPressTag,\n              onFocus: onFocusInput,\n              onBlur: onBlurInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), _jsxDEV(\"div\", {\n            id: \"tag-info\",\n            css: tagInfoBox,\n            children: \"\\uC27C\\uD45C \\uD639\\uC740 \\uC5D4\\uD130\\uB97C \\uC785\\uB825\\uD558\\uC5EC \\uD0DC\\uADF8\\uB97C \\uB4F1\\uB85D\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uB4F1\\uB85D\\uB41C \\uD0DC\\uADF8\\uB97C \\uD074\\uB9AD\\uD558\\uBA74 \\uC0AD\\uC81C\\uB429\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), _jsxDEV(\"div\", {\n          css: line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), _jsxDEV(\"div\", {\n          css: expressionBox,\n          children: expressions.map((v, index) => {\n            return _jsxDEV(\"div\", {\n              css: box,\n              children: [_jsxDEV(\"div\", {\n                css: pinyinBox,\n                children: [_jsxDEV(\"input\", {\n                  name: \"pinyin\",\n                  placeholder: \"\\uD55C\\uC5B4\\uBCD1\\uC74C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                  value: v.pinyin,\n                  onChange: onChangeText(index + 1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 21\n                }, this), index !== 0 && _jsxDEV(CloseOutlined, {\n                  onClick: deleteExpression(index + 1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 23\n                }, this), _jsxDEV(ConvertPopUp, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this), _jsxDEV(\"input\", {\n                name: \"meaning\",\n                placeholder: \"\\uB73B\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                value: v.meaning,\n                onChange: onChangeText(index + 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this)]\n            }, v.expressionNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), _jsxDEV(PlusCircleFilled, {\n          css: plusBtn,\n          onClick: addExpression\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), _jsxDEV(\"footer\", {\n        css: footerBox,\n        children: [_jsxDEV(ArrowLeftOutlined, {\n          onClick: () => router.replace('/')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"round\",\n          css: roundBtn,\n          onClick: addPost,\n          children: \"\\uB9CC\\uB4E4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Write;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/pages/write.js"],"names":["css","Input","Button","Modal","useCallback","useState","useDispatch","useSelector","ArrowLeftOutlined","PlusCircleFilled","CloseOutlined","useRouter","createGlobalStyle","useInput","ADD_HASHTAG_REQUEST","REMOVE_HASHTAG_REQUEST","ADD_POST_REQUEST","ExpressionBox","roundBtn","ConvertPopUp","TextArea","writePage","writeBox","titleBox","tagBox","tags","tagInfoBox","line","expressionBox","box","pinyinBox","plusBtn","footerBox","Global","Write","router","dispatch","currentHashtags","state","post","title","onChangeTitle","tag","onChangeTag","setTag","onFocusInput","document","getElementById","style","display","onBlurInput","onKeyPressTag","e","key","preventDefault","trim","includes","type","data","slice","onClickTag","v","expressions","setExpressions","expressionNumber","pinyin","meaning","onChangeText","expressionNum","tempExpressions","map","expression","target","name","value","addExpression","length","deleteExpression","filter","order","arrangedExpressions","addPost","isExpressionNull","warning","minRows","index","replace"],"mappings":"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","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { Input, Button, Modal } from 'antd';\r\nimport { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  ArrowLeftOutlined,\r\n  PlusCircleFilled,\r\n  CloseOutlined,\r\n} from '@ant-design/icons';\r\nimport { useRouter } from 'next/router';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport useInput from '../hooks/useInput';\r\nimport {\r\n  ADD_HASHTAG_REQUEST,\r\n  REMOVE_HASHTAG_REQUEST,\r\n  ADD_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport ExpressionBox from '../components/ExpressionBox';\r\nimport { roundBtn } from '../components/styles';\r\nimport ConvertPopUp from '../components/ConvertPopUp';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst writePage = css`\r\n  position: relative;\r\n`;\r\n\r\nconst writeBox = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 30px 20px 0;\r\n`;\r\n\r\nconst titleBox = css`\r\n  width: 100%;\r\n  padding: 4px 0;\r\n  margin-bottom: 10px;\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n  border: none;\r\n\r\n  &:focus {\r\n    border: none;\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\nconst tagBox = css`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst tags = css`\r\n  align-items: center;\r\n  flex-wrap: nowrap;\r\n\r\n  button {\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n    font-size: 14px;\r\n    border: 1px solid #d3adf7;\r\n    border-radius: 2px;\r\n    color: #531dab;\r\n    background-color: #f9f0ff;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  input {\r\n    font-size: 14px;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst tagInfoBox = css`\r\n  display: none;\r\n  width: 220px;\r\n  padding: 5px;\r\n  font-size: 13px;\r\n  color: #fff;\r\n  background-color: #3a18ff;\r\n`;\r\n\r\nconst line = css`\r\n  width: 40px;\r\n  height: 10px;\r\n  margin-bottom: 25px;\r\n  background-color: #48494b;\r\n`;\r\n\r\nconst expressionBox = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst box = css`\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 30px 15px;\r\n  margin-bottom: 20px;\r\n  border: 3px solid #18ddff;\r\n  border-radius: 4px;\r\n\r\n  input {\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-bottom: 1px solid #48494b;\r\n  }\r\n\r\n  span {\r\n    position: absolute;\r\n    top: -12px;\r\n    right: -2px;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst pinyinBox = css`\r\n  position: relative;\r\n  height: 52px;\r\n  margin-bottom: 15px;\r\n\r\n  button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst plusBtn = css`\r\n  margin-bottom: 80px;\r\n\r\n  svg {\r\n    font-size: 50px;\r\n    color: #3a18ff;\r\n  }\r\n`;\r\n\r\nconst footerBox = css`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 60px;\r\n  padding: 15px;\r\n  box-shadow: 0px 0px 8px rgba(58, 24, 255, 20%);\r\n  background-color: #fff;\r\n\r\n  span {\r\n    cursor: pointer;\r\n  }\r\n\r\n  svg {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst Global = createGlobalStyle`\r\n  .ant-modal-confirm-body-wrapper\r\n    > .ant-modal-confirm-body\r\n    > .ant-modal-confirm-title {\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nconst Write = () => {\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n  const { currentHashtags } = useSelector((state) => state.post);\r\n\r\n  const [title, onChangeTitle] = useInput('');\r\n  const [tag, onChangeTag, setTag] = useInput('');\r\n\r\n  const onFocusInput = useCallback(() => {\r\n    document.getElementById('tag-info').style.display = 'block';\r\n  }, []);\r\n  const onBlurInput = useCallback(() => {\r\n    document.getElementById('tag-info').style.display = 'none';\r\n  }, []);\r\n\r\n  const onKeyPressTag = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter' || e.key === ',') {\r\n        e.preventDefault();\r\n        // 빈칸으로 입력하지 않았을때만 리스트에 추가\r\n        if (tag.trim() !== '') {\r\n          // 이미 있는 해시태그가 아닐때만 리스트에 추가\r\n          if (!currentHashtags.includes(tag)) {\r\n            // #을 붙여서 해시태그를 입력했을 때는 #을 떼고\r\n            if (tag[0] === '#') {\r\n              dispatch({\r\n                type: ADD_HASHTAG_REQUEST,\r\n                data: tag.slice(1),\r\n              });\r\n            } else {\r\n              dispatch({\r\n                type: ADD_HASHTAG_REQUEST,\r\n                data: tag,\r\n              });\r\n            }\r\n          }\r\n        }\r\n        setTag('');\r\n      }\r\n    },\r\n    [tag]\r\n  );\r\n\r\n  const onClickTag = useCallback((v) => {\r\n    dispatch({\r\n      type: REMOVE_HASHTAG_REQUEST,\r\n      data: v,\r\n    });\r\n  }, []);\r\n\r\n  const [expressions, setExpressions] = useState([\r\n    { expressionNumber: 1, pinyin: '', meaning: '' },\r\n  ]);\r\n\r\n  const onChangeText = useCallback(\r\n    (expressionNum) => (e) => {\r\n      const tempExpressions = expressions.map((expression) => {\r\n        if (expressionNum === expression.expressionNumber) {\r\n          expression[e.target.name] = e.target.value;\r\n        }\r\n        return expression;\r\n      });\r\n      setExpressions(tempExpressions);\r\n    },\r\n    [expressions]\r\n  );\r\n\r\n  const addExpression = useCallback(() => {\r\n    const data = {\r\n      expressionNumber: expressions.length + 1,\r\n      pinyin: '',\r\n      meaning: '',\r\n    };\r\n    setExpressions([...expressions, data]);\r\n  }, [expressions]);\r\n\r\n  const deleteExpression = useCallback(\r\n    (expressionNum) => () => {\r\n      const tempExpressions = expressions.filter(\r\n        (v) => v.expressionNumber !== expressionNum\r\n      );\r\n      let order = 1;\r\n      const arrangedExpressions = tempExpressions.map((v) => {\r\n        v.expressionNumber = order;\r\n        order++;\r\n        return v;\r\n      });\r\n      setExpressions([...arrangedExpressions]);\r\n    },\r\n    [expressions]\r\n  );\r\n\r\n  const addPost = useCallback(() => {\r\n    let isExpressionNull = false;\r\n    expressions.map((v) => {\r\n      if (!v.pinyin || !v.meaning) {\r\n        isExpressionNull = true;\r\n      }\r\n    });\r\n\r\n    if (!title && !isExpressionNull) {\r\n      Modal.warning({\r\n        title: '제목을 입력해주세요!',\r\n      });\r\n    }\r\n    if (isExpressionNull && title) {\r\n      Modal.warning({\r\n        title: '비어있는 표현을 모두 채워주세요!',\r\n      });\r\n    }\r\n    if (!title && isExpressionNull) {\r\n      Modal.warning({\r\n        title: '비어있는 제목과 표현을 모두 채워주세요!',\r\n      });\r\n    }\r\n\r\n    // 빈칸 없이 모두 입력되었을 때 표현 업로드하기\r\n    if (title && !isExpressionNull) {\r\n      dispatch({\r\n        type: ADD_POST_REQUEST,\r\n        data: {\r\n          title: title,\r\n          tag: currentHashtags,\r\n          expression: expressions,\r\n        },\r\n      });\r\n    }\r\n  }, [title, currentHashtags, expressions]);\r\n\r\n  return (\r\n    <>\r\n      <Global />\r\n      <div css={writePage}>\r\n        <div css={writeBox}>\r\n          <TextArea\r\n            css={titleBox}\r\n            placeholder=\"제목을 입력해주세요\"\r\n            value={title}\r\n            onChange={onChangeTitle}\r\n            autoSize={{ minRows: 1 }}\r\n          />\r\n          <div css={tagBox}>\r\n            <div css={tags}>\r\n              {currentHashtags.map((v, index) => {\r\n                return (\r\n                  <button key={v} onClick={() => onClickTag(v)}>\r\n                    {v}\r\n                  </button>\r\n                );\r\n              })}\r\n              <input\r\n                placeholder=\"태그를 입력해주세요\"\r\n                value={tag}\r\n                onChange={onChangeTag}\r\n                onKeyPress={onKeyPressTag}\r\n                onFocus={onFocusInput}\r\n                onBlur={onBlurInput}\r\n              />\r\n            </div>\r\n            <div id=\"tag-info\" css={tagInfoBox}>\r\n              쉼표 혹은 엔터를 입력하여 태그를 등록할 수 있습니다. 등록된 태그를\r\n              클릭하면 삭제됩니다.\r\n            </div>\r\n          </div>\r\n          <div css={line}></div>\r\n          {/* <ExpressionBox /> */}\r\n          <div css={expressionBox}>\r\n            {expressions.map((v, index) => {\r\n              return (\r\n                <div css={box} key={v.expressionNumber}>\r\n                  <div css={pinyinBox}>\r\n                    <input\r\n                      name=\"pinyin\"\r\n                      placeholder=\"한어병음을 입력해주세요\"\r\n                      value={v.pinyin}\r\n                      onChange={onChangeText(index + 1)}\r\n                    />\r\n                    {index !== 0 && (\r\n                      <CloseOutlined onClick={deleteExpression(index + 1)} />\r\n                    )}\r\n                    <ConvertPopUp />\r\n                  </div>\r\n                  <input\r\n                    name=\"meaning\"\r\n                    placeholder=\"뜻을 입력해주세요\"\r\n                    value={v.meaning}\r\n                    onChange={onChangeText(index + 1)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <PlusCircleFilled css={plusBtn} onClick={addExpression} />\r\n        </div>\r\n        <footer css={footerBox}>\r\n          <ArrowLeftOutlined onClick={() => router.replace('/')} />\r\n          <Button type=\"primary\" shape=\"round\" css={roundBtn} onClick={addPost}>\r\n            만들기\r\n          </Button>\r\n        </footer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Write;\r\n"]},"metadata":{},"sourceType":"module"}