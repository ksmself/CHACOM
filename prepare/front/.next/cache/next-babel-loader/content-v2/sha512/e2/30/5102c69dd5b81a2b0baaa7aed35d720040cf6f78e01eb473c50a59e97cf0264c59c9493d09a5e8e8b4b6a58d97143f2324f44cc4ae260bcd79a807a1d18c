{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post'; // (이전 상태, 액션) => 다음 상태\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      {\n        const combineReducer = combineReducers({\n          user,\n          post\n        });\n        return combineReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/reducers/index.js"],"names":["combineReducers","HYDRATE","user","post","rootReducer","state","action","type","console","log","payload","combineReducer"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,OAAL;AACEO,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CACKD,KADL,GAEKC,MAAM,CAACI,OAFZ;;AAIF;AAAS;AACP,cAAMC,cAAc,GAAGX,eAAe,CAAC;AACrCE,UAAAA,IADqC;AAErCC,UAAAA;AAFqC,SAAD,CAAtC;AAIA,eAAOQ,cAAc,CAACN,KAAD,EAAQC,MAAR,CAArB;AACD;AAbH;AAeD,CAhBD;;AAkBA,eAAeF,WAAf","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { HYDRATE } from 'next-redux-wrapper';\r\n\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n// (이전 상태, 액션) => 다음 상태\r\nconst rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      console.log('HYDRATE', action);\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default: {\r\n      const combineReducer = combineReducers({\r\n        user,\r\n        post,\r\n      });\r\n      return combineReducer(state, action);\r\n    }\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}