{"ast":null,"code":"import { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport _toConsumableArray from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uC2B9\\uBBF8\\\\Desktop\\\\for-portfolio\\\\2021-April\\\\prepare\\\\front\\\\components\\\\ExpressionBox.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  svg {\\n    font-size: 50px;\\n    color: #3a18ff;\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  height: 52px;\\n  margin-bottom: 5px;\\n\\n  button {\\n    position: absolute;\\n    bottom: 0;\\n    right: 0;\\n    font-size: 13px;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  padding: 15px 10px;\\n  margin-bottom: 20px;\\n  border: 3px solid #18ddff;\\n  border-radius: 4px;\\n\\n  input {\\n    width: 100%;\\n    font-size: 16px;\\n    border: none;\\n    border-bottom: 1px solid #48494b;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport ConvertPopUp from './ConvertPopUp';\nimport ExpressionInput from './ExpressionInput';\nvar expressionBox = css(_templateObject());\nvar box = css(_templateObject2());\nvar pinyinBox = css(_templateObject3());\nvar plusBtn = css(_templateObject4());\n\nvar ExpressionBox = function ExpressionBox() {\n  _s();\n\n  var _useState = useState(''),\n      pinyin = _useState[0],\n      setPinyin = _useState[1];\n\n  var onChangePinyin = useCallback(function (e) {// setPinyin(e.target.value);\n  }, []);\n\n  var _useState2 = useState(''),\n      meaning = _useState2[0],\n      setMeaning = _useState2[1];\n\n  var onChangeMeaning = useCallback(function (expressionNum) {\n    return function (e) {\n      var tempExpressions = expressions.map(function (expression) {\n        if (expressionNum === expression.expressionNumber) {\n          expression[e.target.name] = e.target.value;\n        }\n\n        return expression;\n      });\n      setExpressions(tempExpressions);\n    };\n  }, []);\n\n  var _useState3 = useState([{\n    expressionNumber: 1,\n    pinyin: '',\n    meaning: ''\n  }]),\n      expressions = _useState3[0],\n      setExpressions = _useState3[1];\n\n  var addExpression = useCallback(function () {\n    var data = {\n      expressionNumber: expressions.length + 1,\n      pinyin: '',\n      meaning: ''\n    };\n    setExpressions([].concat(_toConsumableArray(expressions), [data]));\n  }, [expressions]);\n  useEffect(function () {\n    console.log(expressions);\n  }, [expressions]);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"div\", {\n      css: expressionBox,\n      id: \"expression-box\",\n      children: expressions.map(function (v, index) {\n        return _jsxDEV(\"div\", {\n          css: box,\n          children: [_jsxDEV(\"div\", {\n            css: pinyinBox,\n            children: [_jsxDEV(\"input\", {\n              name: \"pinyin\",\n              placeholder: \"\\uD55C\\uC5B4\\uBCD1\\uC74C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n              value: v.pinyin,\n              onChange: function onChange() {\n                return onChangePinyin(index + 1);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, _this), _jsxDEV(ConvertPopUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, _this), _jsxDEV(\"input\", {\n            name: \"meaning\",\n            placeholder: \"\\uB73B\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            value: v.meaning,\n            onChange: onChangeMeaning(index + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, _this)]\n        }, v.expressionNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, _this), _jsxDEV(PlusCircleFilled, {\n      css: plusBtn,\n      onClick: addExpression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(ExpressionBox, \"Vl0oKx5SEs0H1Jfw92YsemaaO4A=\");\n\n_c = ExpressionBox;\nexport default ExpressionBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpressionBox\");","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/components/ExpressionBox.js"],"names":["css","useCallback","useEffect","useState","PlusCircleFilled","ConvertPopUp","ExpressionInput","expressionBox","box","pinyinBox","plusBtn","ExpressionBox","pinyin","setPinyin","onChangePinyin","e","meaning","setMeaning","onChangeMeaning","expressionNum","tempExpressions","expressions","map","expression","expressionNumber","target","name","value","setExpressions","addExpression","data","length","console","log","v","index"],"mappings":"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","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { PlusCircleFilled } from '@ant-design/icons';\r\n\r\nimport ConvertPopUp from './ConvertPopUp';\r\nimport ExpressionInput from './ExpressionInput';\r\n\r\nconst expressionBox = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst box = css`\r\n  width: 100%;\r\n  padding: 15px 10px;\r\n  margin-bottom: 20px;\r\n  border: 3px solid #18ddff;\r\n  border-radius: 4px;\r\n\r\n  input {\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-bottom: 1px solid #48494b;\r\n  }\r\n`;\r\n\r\nconst pinyinBox = css`\r\n  position: relative;\r\n  height: 52px;\r\n  margin-bottom: 5px;\r\n\r\n  button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst plusBtn = css`\r\n  svg {\r\n    font-size: 50px;\r\n    color: #3a18ff;\r\n  }\r\n`;\r\n\r\nconst ExpressionBox = () => {\r\n  const [pinyin, setPinyin] = useState('');\r\n  const onChangePinyin = useCallback((e) => {\r\n    // setPinyin(e.target.value);\r\n  }, []);\r\n\r\n  const [meaning, setMeaning] = useState('');\r\n  const onChangeMeaning = useCallback(\r\n    (expressionNum) => (e) => {\r\n      const tempExpressions = expressions.map((expression) => {\r\n        if (expressionNum === expression.expressionNumber) {\r\n          expression[e.target.name] = e.target.value;\r\n        }\r\n        return expression;\r\n      });\r\n      setExpressions(tempExpressions);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [expressions, setExpressions] = useState([\r\n    { expressionNumber: 1, pinyin: '', meaning: '' },\r\n  ]);\r\n\r\n  const addExpression = useCallback(() => {\r\n    const data = {\r\n      expressionNumber: expressions.length + 1,\r\n      pinyin: '',\r\n      meaning: '',\r\n    };\r\n    setExpressions([...expressions, data]);\r\n  }, [expressions]);\r\n\r\n  useEffect(() => {\r\n    console.log(expressions);\r\n  }, [expressions]);\r\n\r\n  return (\r\n    <>\r\n      <div css={expressionBox} id=\"expression-box\">\r\n        {expressions.map((v, index) => {\r\n          return (\r\n            <div css={box} key={v.expressionNumber}>\r\n              <div css={pinyinBox}>\r\n                <input\r\n                  name=\"pinyin\"\r\n                  placeholder=\"한어병음을 입력해주세요\"\r\n                  value={v.pinyin}\r\n                  onChange={() => onChangePinyin(index + 1)}\r\n                />\r\n                <ConvertPopUp />\r\n              </div>\r\n              <input\r\n                name=\"meaning\"\r\n                placeholder=\"뜻을 입력해주세요\"\r\n                value={v.meaning}\r\n                onChange={onChangeMeaning(index + 1)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <PlusCircleFilled css={plusBtn} onClick={addExpression} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpressionBox;\r\n"]},"metadata":{},"sourceType":"module"}