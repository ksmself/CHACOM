{"ast":null,"code":"import { all, call, fork, put, takeLatest } from '@redux-saga/core/effects';\nimport axios from 'axios';\nimport { CHECK_DUPLICATE_FAILURE, CHECK_DUPLICATE_REQUEST, CHECK_DUPLICATE_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signUpAPI, action.data);\n    console.log(action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/user/logout', data);\n}\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(logOutAPI, action.data);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction checkDuplicateAPI(data) {// return axios.post('/user', data);\n}\n\nfunction* checkDuplicate(action) {\n  try {\n    // const result = yield call(checkDuplicateAPI, action.data);\n    // result가 true(중복있다) or false(중복없다)\n    yield put({\n      type: CHECK_DUPLICATE_SUCCESS,\n      data: false\n    });\n  } catch (err) {\n    yield put({\n      type: CHECK_DUPLICATE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchCheckDuplicate() {\n  yield takeLatest(CHECK_DUPLICATE_REQUEST, checkDuplicate);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchLogIn), fork(watchLogOut), fork(watchCheckDuplicate)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/sagas/user.js"],"names":["all","call","fork","put","takeLatest","axios","CHECK_DUPLICATE_FAILURE","CHECK_DUPLICATE_REQUEST","CHECK_DUPLICATE_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","signUpAPI","data","post","signUp","action","console","log","type","err","error","response","logInAPI","logIn","logOutAPI","logOut","checkDuplicateAPI","checkDuplicate","watchSignUp","watchLogIn","watchLogOut","watchCheckDuplicate","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeLatest } from '@redux-saga/core/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  CHECK_DUPLICATE_FAILURE,\r\n  CHECK_DUPLICATE_REQUEST,\r\n  CHECK_DUPLICATE_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    // const result = yield call(signUpAPI, action.data);\r\n    console.log(action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI(data) {\r\n  return axios.post('/user/logout', data);\r\n}\r\n\r\nfunction* logOut(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI, action.data);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction checkDuplicateAPI(data) {\r\n  // return axios.post('/user', data);\r\n}\r\n\r\nfunction* checkDuplicate(action) {\r\n  try {\r\n    // const result = yield call(checkDuplicateAPI, action.data);\r\n    // result가 true(중복있다) or false(중복없다)\r\n    yield put({\r\n      type: CHECK_DUPLICATE_SUCCESS,\r\n      data: false,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: CHECK_DUPLICATE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchCheckDuplicate() {\r\n  yield takeLatest(CHECK_DUPLICATE_REQUEST, checkDuplicate);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchSignUp),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchCheckDuplicate),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}