{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(convertPinyin),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchConvertPinyin),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, CONVERT_PINYIN_FAILURE, CONVERT_PINYIN_REQUEST, CONVERT_PINYIN_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/post', data);\n}\n\nfunction loadPost(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          _result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction loadPosts(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function loadPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          _result2 = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: _result2.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var _result3;\n\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          _result3 = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: _result3.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: _result3.data\n          });\n\n        case 8:\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            // REMOVE_POST_OF_ME\n            data: result.data\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction convertPinyinAPI(data) {\n  return axios.post('/post/convert/pinyin', data);\n}\n\nfunction convertPinyin(action) {\n  var _result4;\n\n  return _regeneratorRuntime.wrap(function convertPinyin$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(convertPinyinAPI, action.data);\n\n        case 3:\n          _result4 = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: CONVERT_PINYIN_SUCCESS,\n            data: _result4.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: CONVERT_PINYIN_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchConvertPinyin() {\n  return _regeneratorRuntime.wrap(function watchConvertPinyin$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchLoadPost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchConvertPinyin)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/sagas/post.js"],"names":["loadPost","loadPosts","addPost","removePost","convertPinyin","watchLoadPost","watchLoadPosts","watchAddPost","watchRemovePost","watchConvertPinyin","postSaga","axios","all","fork","takeLatest","call","put","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","CONVERT_PINYIN_FAILURE","CONVERT_PINYIN_REQUEST","CONVERT_PINYIN_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","action","result","type","console","error","response","loadPostsAPI","addPostAPI","post","removePostAPI","convertPinyinAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  CONVERT_PINYIN_FAILURE,\r\n  CONVERT_PINYIN_REQUEST,\r\n  CONVERT_PINYIN_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/post', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME, // REMOVE_POST_OF_ME\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction convertPinyinAPI(data) {\r\n  return axios.post('/post/convert/pinyin', data);\r\n}\r\n\r\nfunction* convertPinyin(action) {\r\n  try {\r\n    const result = yield call(convertPinyinAPI, action.data);\r\n    yield put({\r\n      type: CONVERT_PINYIN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: CONVERT_PINYIN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchConvertPinyin() {\r\n  yield takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchConvertPinyin),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}