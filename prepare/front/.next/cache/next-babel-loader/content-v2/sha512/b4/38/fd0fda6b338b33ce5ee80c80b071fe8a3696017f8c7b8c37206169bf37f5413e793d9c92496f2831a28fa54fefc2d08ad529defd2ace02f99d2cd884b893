{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, CONVERT_PINYIN_FAILURE, CONVERT_PINYIN_REQUEST, CONVERT_PINYIN_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/post', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction convertPinyinAPI(data) {\n  return axios.post('/post/convert/pinyin', data);\n}\n\nfunction* convertPinyin(action) {\n  try {\n    const result = yield call(convertPinyinAPI, action.data);\n    yield put({\n      type: CONVERT_PINYIN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: CONVERT_PINYIN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchConvertPinyin() {\n  yield takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchLoadPosts), fork(watchAddPost), fork(watchConvertPinyin)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/sagas/post.js"],"names":["axios","all","fork","takeLatest","call","put","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","CONVERT_PINYIN_FAILURE","CONVERT_PINYIN_REQUEST","CONVERT_PINYIN_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","ADD_POST_TO_ME","loadPostAPI","data","get","loadPost","action","result","type","err","console","error","response","loadPostsAPI","loadPosts","addPostAPI","post","addPost","convertPinyinAPI","convertPinyin","watchLoadPost","watchLoadPosts","watchAddPost","watchConvertPinyin","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  CONVERT_PINYIN_FAILURE,\r\n  CONVERT_PINYIN_REQUEST,\r\n  CONVERT_PINYIN_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/post', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction convertPinyinAPI(data) {\r\n  return axios.post('/post/convert/pinyin', data);\r\n}\r\n\r\nfunction* convertPinyin(action) {\r\n  try {\r\n    const result = yield call(convertPinyinAPI, action.data);\r\n    yield put({\r\n      type: CONVERT_PINYIN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: CONVERT_PINYIN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchConvertPinyin() {\r\n  yield takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchConvertPinyin),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}