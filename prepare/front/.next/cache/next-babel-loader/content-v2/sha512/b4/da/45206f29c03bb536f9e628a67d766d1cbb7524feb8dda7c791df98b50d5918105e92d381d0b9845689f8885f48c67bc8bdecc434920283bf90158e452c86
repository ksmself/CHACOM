{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/\\uAE40\\uC2B9\\uBBF8/Desktop/for-portfolio/2021-April/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(convertPinyin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchConvertPinyin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, CONVERT_PINYIN_FAILURE, CONVERT_PINYIN_REQUEST, CONVERT_PINYIN_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction convertPinyinAPI(data) {\n  return axios.post('post/convert/pinyin', data);\n}\n\nfunction convertPinyin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function convertPinyin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(convertPinyinAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: CONVERT_PINYIN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: CONVERT_PINYIN_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchConvertPinyin() {\n  return _regeneratorRuntime.wrap(function watchConvertPinyin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchConvertPinyin)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/for-portfolio/2021-April/prepare/front/sagas/post.js"],"names":["addPost","convertPinyin","watchAddPost","watchConvertPinyin","postSaga","axios","all","fork","takeLatest","call","put","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","CONVERT_PINYIN_FAILURE","CONVERT_PINYIN_REQUEST","CONVERT_PINYIN_SUCCESS","addPostAPI","data","post","action","type","error","response","convertPinyinAPI","result"],"mappings":";;oDAeUA,O;qDAmBAC,a;qDAeAC,Y;qDAIAC,kB;qDAIeC,Q;;AAzDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,0BAAjD;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,sBAJF,EAKEC,sBALF,EAMEC,sBANF,QAOO,kBAPP;;AASA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOb,KAAK,CAACc,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACD;;AAED,SAAUlB,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAER,gBADE;AAERK,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMR,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEV,gBADE;AAERW,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASM,gBAAT,CAA0BN,IAA1B,EAAgC;AAC9B,SAAOb,KAAK,CAACc,IAAN,CAAW,qBAAX,EAAkCD,IAAlC,CAAP;AACD;;AAED,SAAUjB,aAAV,CAAwBmB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACe,gBAAD,EAAmBJ,MAAM,CAACF,IAA1B,CAAV;;AAFnB;AAEUO,UAAAA,MAFV;AAAA;AAGI,iBAAMf,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEL,sBADE;AAERE,YAAAA,IAAI,EAAEO,MAAM,CAACP;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMR,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEP,sBADE;AAERQ,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACI,gBAAD,EAAmBZ,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACO,sBAAD,EAAyBd,aAAzB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CAACC,IAAI,CAACL,YAAD,CAAL,EAAqBK,IAAI,CAACJ,kBAAD,CAAzB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, call, put } from '@redux-saga/core/effects';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  CONVERT_PINYIN_FAILURE,\r\n  CONVERT_PINYIN_REQUEST,\r\n  CONVERT_PINYIN_SUCCESS,\r\n} from '../reducers/post';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction convertPinyinAPI(data) {\r\n  return axios.post('post/convert/pinyin', data);\r\n}\r\n\r\nfunction* convertPinyin(action) {\r\n  try {\r\n    const result = yield call(convertPinyinAPI, action.data);\r\n    yield put({\r\n      type: CONVERT_PINYIN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: CONVERT_PINYIN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchConvertPinyin() {\r\n  yield takeLatest(CONVERT_PINYIN_REQUEST, convertPinyin);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchConvertPinyin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}